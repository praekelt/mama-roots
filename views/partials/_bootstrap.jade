//- swap out category UUIDs for category titles
- records.pages = records.pages.map(function(page) {
-   records.categories.forEach(function(category) {
-     if (page.primary_category === category.uuid) {
-       page.primary_category = category.title;
-     }
-   });
-   return page;
- });

//- set each category a `featured` prop with all articles
//- that specify `featured_in_category` as true, making sure
//- of correct category placement, sorted in ascending order
- records.categories = records.categories.map(function(category) {
-   category.featured_pages = [];
-   records.pages.forEach(function(page) {
-     if (page.featured_in_category && (page.primary_category === category.title)) {
-       category.featured_pages.push(page);
-     }
-   });
-   category.featured_pages = category.featured_pages.sort(function(a, b) {
-     return a.position - b.position;
-   });
-   return category;
- });
- records.categories = [records.categories[1], records.categories[0], records.categories[2]];

//- set each category a `pages` prop with all articles
//- that belong to that category, sorted in ascending
//- order
- records.categories = records.categories.map(function(category) {
-   category.pages = [];
-   records.pages.forEach(function(page) {
-     if (page.primary_category === category.title) {
-       category.pages.push(page);
-     }
-   });
-   category.pages = category.pages.sort(function(a, b) {
-     return a.position - b.position;
-   });
-   return category;
- });

//- set recommended pages for root view
- var recommended_pages = records.pages.filter(function(page) {
-   return page.featured === true;
- }).sort(function(a, b) {
-  return a.position - b.position;
- });

//- set the category slug on each page
- records.pages = records.pages.map(function(page) {
-   records.categories.forEach(function(category) {
-     if (page.primary_category === category.title) {
-       page.primary_category_slug = category.slug;
-     }
-   });
-   return page;
- });
